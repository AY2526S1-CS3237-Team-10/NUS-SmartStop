# Telegraf Configuration for NUS-SmartStop

# Global Agent Configuration
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Output Plugin: InfluxDB v2
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  urls = ["${INFLUXDB_URL}"]
  
  ## Token for authentication.
  token = "${INFLUXDB_TOKEN}"
  
  ## Organization is the name of the organization you want to write to.
  organization = "${INFLUXDB_ORG}"
  
  ## Destination bucket to write into.
  bucket = "${INFLUXDB_BUCKET}"
  
  ## Timeout for HTTP messages.
  timeout = "5s"
  
  ## HTTP User-Agent
  user_agent = "telegraf-smartstop"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Input Plugin: MQTT Consumer
[[inputs.mqtt_consumer]]
  ## MQTT broker URLs to be used. The format should be scheme://host:port
  servers = ["tcp://${MQTT_BROKER}:${MQTT_PORT}"]
  
  ## Topics to subscribe to
  topics = [
    "smartstop/sensors/#",
    "smartstop/camera/#"
  ]
  
  ## QoS policy for messages
  ## 0 = at most once
  ## 1 = at least once
  ## 2 = exactly once
  qos = 1
  
  ## Connection timeout for initial connection in seconds
  connection_timeout = "30s"
  
  ## Maximum messages to read from the broker that have not been written by an
  ## output. For best throughput set based on the number of metrics within
  ## each message and the size of the output's metric_batch_size.
  max_undelivered_messages = 1000
  
  ## Persistent session configuration
  ## Useful when qos > 0 and a connection is lost to the broker
  persistent_session = false
  client_id = "telegraf-smartstop"
  
  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json"
  
  ## Tag keys to extract from the JSON payload
  tag_keys = [
    "device_id",
    "location",
    "sensor_type"
  ]
  
  ## Field keys to extract from JSON (sensor values)
  json_string_fields = []
  
  ## Query is a GJSON path that specifies a specific chunk of JSON to be
  ## parsed, if not specified the whole document will be parsed.
  json_query = ""
  
  ## Name key is the key to use as the measurement name.
  json_name_key = ""
  
  ## Time key is the key containing the time that should be used to create the
  ## metric. If not specified the message reception time will be used.
  json_time_key = "timestamp"
  json_time_format = "unix"
  
  ## Timezone allows you to provide an override for timestamps that
  ## do not already include an offset
  json_timezone = "UTC"

# Optional: MQTT topic-based measurement routing
[[inputs.mqtt_consumer.topic_parsing]]
  topic = "smartstop/sensors/+/+"
  measurement = "_/_/measurement/_"
  tags = "_/_/_/device_id"
  fields = "_/_/_/_"

[[inputs.mqtt_consumer.topic_parsing]]
  topic = "smartstop/camera/+"
  measurement = "camera_event"
  tags = "_/_/device_id"

###############################################################################
#                           PROCESSOR PLUGINS                                 #
###############################################################################

# Processor Plugin: Override measurement name based on sensor_type
[[processors.rename]]
  [[processors.rename.replace]]
    measurement = "ultrasonic"
    dest = "distance_sensor"

# Processor Plugin: Add default tags
[[processors.enum]]
  [[processors.enum.mapping]]
    ## Name of the field to map
    field = "sensor_type"
    
    ## Table of mappings
    [processors.enum.mapping.value_mappings]
      ultrasonic = "distance"
      temperature = "temp"
      humidity = "humid"
